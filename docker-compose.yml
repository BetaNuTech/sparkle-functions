version: "3.7"

services:
  yarn:
    image: "node:10.15-alpine"
    working_dir: /src
    entrypoint: yarn
    volumes:
      - ./appengine:/src

  start:
    image: "node:10.15-alpine"
    working_dir: /src
    env_file: .env
    command: [sh, -c, "yarn start"]
    ports:
      - "3000:3000"
    volumes:
      - ./appengine:/src

  yarn-fn:
    image: "node:10-alpine"
    working_dir: /src/functions
    entrypoint: yarn
    volumes:
      - ./functions:/src/functions

  test-unit-fn:
    image: "node:10-alpine"
    working_dir: /src/functions
    env_file: .env.test
    command: [sh, -c, "yarn test-unit"]
    volumes:
      - ./auth.json:/src/auth.json
      - ./functions:/src/functions

  test-e2e-fn:
    image: "node:10.15-alpine"
    working_dir: /src/functions
    env_file: .env.test
    environment:
      - AUTH_FILE_PATH=/src/auth.json
    command: [sh, -c, "yarn && yarn test-e2e"]
    volumes:
      - ./auth.json:/src/auth.json
      - ./functions:/src/functions

  deploy-fn:
    image: mj3000/firebase-tools
    working_dir: /srv
    env_file: .env
    command: >
      bash -c "if [[ -z \"${FIREBASE_TOKEN}\" ]];
      then
        echo 'ERROR: FIREBASE_TOKEN not provided'; exit 1;
      else
        if [[ -z \"${FIREBASE_PROJECT}\" ]];
        then
          echo 'Deploying default project'
        else
          echo 'Deploying to project \"${FIREBASE_PROJECT}\"';
          firebase use $FIREBASE_PROJECT --non-interactive --token $FIREBASE_TOKEN
        fi
        ./scripts/deploy-functions.sh production
      fi"

    volumes:
      - .:/srv

  gcloud:
    build:
      context: .
      dockerfile: gcloud-Dockerfile
    working_dir: /root
    entrypoint: gcloud
    volumes:
      - ./gcloud-root:/root

  gcloud-auth:
    build:
      context: .
      dockerfile: gcloud-Dockerfile
    working_dir: /root
    command:
      [
        sh,
        -c,
        "gcloud auth activate-service-account --key-file=/root/auth.json",
      ]
    volumes:
      - ./gcloud-root:/root
      - ./auth.json:/root/auth.json

  deploy:
    build:
      context: .
      dockerfile: gcloud-Dockerfile
    working_dir: /root
    command: [sh, -c, "cd /home && gcloud app deploy app.yaml cron.yaml"]
    volumes:
      - ./gcloud-root:/root
      - ./appengine:/home
